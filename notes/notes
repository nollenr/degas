Tuesday, 10/02
rails generate model grapes name:string, color:string

Wednesday, 10/03
rails generate model Bottle bottle_id:integer, grape:belongs_to
rails generate controller Bottle

Saturday 10/06
rails generate migration AddAvailStatusToBottle availability_change_date:date availability_change_message:string
(Note:  the word bottle must be in the "name".  ActiveRecord uses that key to create the correct migration.  It
will be empty if you don't.)

Annotate
bundle exec annotate

Done:  Ajax the "consume" function
Done:  Flash messages
Done:  Confirm
Done:  Use after_find (rather than the funny select) for available/consumed bottles... 
       still confused about how that might be working!
Done:  Fixed order by so that the rows are ordered by bottle id.  (BTW, order has to come before all)
Done:  Use attr_writer rather than trying to set an attribute on the model (oops). 
       This seems to be the right way to attack this problem... use a setter/getter method
       along with the after find.
N/A:   When I use the consume function after I've toggled to only available bottles, the display 
       reverts to "all" bottles.  Now that the consume function is Ajaxed, this may be unnecessary.
N/A:   Clear search fields after search is complete.  I don't think I wanna to do this.  Too 
       confusing for the user.
Done:  What about adding bottles
       Okay... start with building a simple form according to the rails tutorial (Hartl).  Then
       figure out autocomplete... maybe formtastic and formtastic-bootstrap?  Phase 1 looks done.
Done:  Wineries
Done:  Names
Done:  Vintages
Done:  Cellar locations
Done:  Add sorts (with arrows, etc).  How do I sort by a "lookup" column?  (i.e. grape name in the 
       bottles index view)
Done:  Adding wineries
Done:  Ajax looses the table headings.  That's gotta be fixed.
Done:  Make sort changes Ajax.  I think this is all working.  You can sort by any column and the 
       toggle stays 'fixed'
Done:  Work out sorting
Done:  Add searches... for just a winery/grape/bottle_id, etc.  Going to try Ransack!
             Not working!  When changed avail/consumed search goes away.  Need to change the "available".
             Now... make it do a post instead of a get.  Then try ajax. 
             Consumed checkbox doesn't get carried over with a sort and ajax.  Okay... I think this is
             seriously working now.  I've added some javascript stuff to the index.js.erb
             which sets the hidden field values as the user changes sort column and direction.
Done:  Add trigger for availability change.  When a record "availability" is changed", the
       trigger fires and updates the availability_change_date with the current timestamp
       unless a timestamp is supplied.  This is accomplished via a db:migration.
Done:  Price on bottles.  Price has been added to the model, index page, and
             bottle entry page.  Sorting on the field works.  Instead of the money gem
             I'm going to use the currency helpers (in rails).  Don't have to worry
             about the "not null and default value of 0.  Added validation.  Error message
             not displaying -- will work on that when implementing authentication (from Hartl).
             http://stackoverflow.com/questions/1019939/ruby-on-rails-best-method-of-handling-currency-money
             http://api.rubyonrails.org/classes/ActionView/Helpers/NumberHelper.html#M001969  
Done:  Default value for available should be true!
Done:  bottles.available should be not null.  All rows where avialable is null need to be
       deleted.
Done:  Add a "copy" function for entering bottles of wine.  Should be easy.  Go to the entry
       form with values for the bottle info.
Done:  Authentication as done by M. Hartl.
Done:  Authorization as done by M. Hartl.

To Do: Can't add a new winery on the fly.  That might be okay for grapes... but probably not wineries.
       A great example is the wine I just purchased from Ljubljana
To Do: Index page doesn't work (with :include nor :joins if a foreign key doesn't exist.  In one case
       I get the "nil method" (joins) and in the other case I don't get records with a null fk (include)
To Do: Error message displays (from the tutorial by M. Hartl)
To Do: Flash a consume... so the user sees the status change.
To Do: Rating wines... what's this look like... does "everything" have to match... even vintage?
       can I display this rating on the index if it exists?
To Do: Un-consuming a bottle
To Do: Add autocomplete on bottle entry
Hold:  Enter a message on the confirm consume pop-up... like date consumed and a note.  I may undo the
       Ajax consume function and go to a page to update the date/message when consuming... then go back
       to the index page.  What would that user experience be like?  Would that make adding a pop-up 
       later easier?  It think so.  Also... can the wine be rated at the same time?
To Do: Pretty everything up.
To Do: Should cellar locations be a look-up that I can add to... for instance: "12th Shelf - Left"
       might be a look-up, but "refridgerator" might be something I want to use even tho
       it isn't in the lookup.
To Do: Validations of bottles... uniqueness, etc.
To Do: MS Excel Export
To Do: Routes.  These _MUST_ be fixed.  What's the difference between ROUTES and MATCH?
To Do: Deploy with SSL (see 7.4.4 of the Hartl book).
To Do: Should user.password_digest and user.remember_token be "not null"?
To Do: bottle.grape_id not null and validates presence?

Working: Adding new users.  Logging in.  Signing up.  Working on chapter 9 - Updating Users. 
         NEED TO LOOK AT USER ROUTES.  I'm getting an error during edit which I believe
         is becuase of routes. It is becuase of routes.  Do I need to do something like
         sessions with the "form_for"?  I'm going to use the model I have for now and 
         work on authorization (9.2). 
Working: Adding field to bottles to identify them as belonging to a specific user.
         Need to make it work like microposts.  Dump all of the data from the bottles
         table.  Change the model so that it is a belongs_to/has_many relationship
         Added user_id to bottles table.  Added validates presence: true.  Added has_many
         to user model and belongs_to to the bottle model.  Changed bottle create from: 
         to: @bottle = current_user.bottles.new(params[:bottle]).

BTW:
_bottle.erb... uses bottle.bottle_id NOT @bottle.bottle_id becuase it is "called" from
      index.html.erb which has created a local variable for it!

Railscasts:
#176 Search Logic
#228 Sortable Table Columns
#240 Search, Sort, Paginate with AJAX
#340 Data Tables
